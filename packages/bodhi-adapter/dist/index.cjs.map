{"version":3,"sources":["../src/index.ts","../src/types/provider.ts","../src/provider/openai/completions.ts","../src/types/chat.ts","../src/provider/base.ts","../src/provider/openai/assistants.ts","../src/provider/google/vertex.ts","../src/provider/google/gemini.ts","../src/provider/google/claude.ts","../src/provider/anthropic/claude.ts","../src/provider/anthropic/bedrock.ts","../src/provider/anthropic/auth.ts","../src/provider/aliyun/qwen.ts","../src/provider/aliyun/wanx.ts","../src/provider/tencent/hunyuan.ts","../src/api/chat.ts","../src/api/image.ts"],"sourcesContent":["export * from './api';\nexport * from './types';\n","export enum Provider {\n  GOOGLE_GEMINI = 'google-gemini',\n  GOOGLE_VERTEX = 'google-vertex',\n  GOOGLE_CLAUDE = 'google-claude',\n  OPENAI_COMPLETIONS = 'openai-completion',\n  OPENAI_ASSISTANTS = 'openai-assistant',\n  ANTHROPIC_CLAUDE = 'anthropic-claude',\n  ANTHROPIC_BEDROCK = 'anthropic-bedrock',\n  ALIYUN_QWEN = 'aliyun-qwen',\n  ALIYUN_WANX = 'aliyun-wanx',\n  TENCENT_HUNYUAN = 'tencent-hunyuan',\n}\n","import fetchSSE from 'node-fetch';\nimport { v4 as uuidv4 } from 'uuid';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { ChatBaseAPI } from '../base';\nimport { openai } from './types';\n\nexport class OpenAICompletionsAPI extends ChatBaseAPI {\n  protected provider: string = 'openai';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://api.openai.com/v1' }, opts);\n    super(options);\n  }\n\n  public models(): string[] {\n    return [\n      'gpt-3.5-turbo',\n      'gpt-3.5-turbo-1106',\n      'gpt-3.5-turbo-16k',\n      'gpt-3.5-turbo-instruct',\n      'gpt-4',\n      'gpt-4-1106-preview',\n      'gpt-4-vision-preview\t',\n      'gpt-4-32k',\n    ];\n  }\n\n  async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n\n    return new Promise(async (resolove, reject) => {\n      const url = `${this.baseURL}/chat/completions`;\n      const params: openai.Request = await this.convertParams(options);\n      // console.log(`[fetch]params`, JSON.stringify(params, null, 2));\n      const res = await fetchSSE(url, {\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${this.apiKey}` },\n        body: JSON.stringify(params),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.error?.message || 'request error', res.status));\n      }\n\n      // not stream\n      if (params.stream === false) {\n        const result = await res.json();\n        const choices = this.convertChoices(result.choices);\n        const usage = result?.usage;\n        resolove({ id: uuidv4(), model: opts.model, choices, usage });\n      } else {\n        // streaming\n        const body: NodeJS.ReadableStream = res.body;\n        body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n        const choicesList: types.chat.Choice[] = [];\n        const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n          if (event.type === 'event') {\n            if (event.data !== '[DONE]') {\n              try {\n                const res = JSON.parse(event.data);\n                const choices = this.convertChoices(res.choices);\n                onProgress?.(choices);\n                choicesList.push(...choices);\n              } catch (e) {\n                // ignore\n              }\n            }\n          }\n        });\n        body.on('readable', async () => {\n          let chunk: string | Buffer;\n          while ((chunk = body.read())) {\n            parser.feed(chunk.toString());\n          }\n        });\n\n        console.log(`->`, choicesList);\n        body.on('end', async () => {\n          const choices: types.chat.Choice[] = this.combineChoices(choicesList);\n          // TODO: Google AI Gemini not found usageMetadata, but vertex founded.\n          const usage = { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 };\n          resolove({ id: uuidv4(), model: opts.model, choices, usage });\n        });\n      }\n    });\n  }\n\n  /**\n   * 转换为 Gemini 要求的请求参数\n   * https://platform.openai.com/docs/api-reference/chat/create\n   * @returns\n   */\n  private async convertParams(opts: types.chat.SendOptions): Promise<openai.Request> {\n    const params: openai.Request = {\n      model: opts.model || 'gpt-3.5-turbo-1106',\n      messages: await this.corvertContents(opts),\n      temperature: opts?.temperature || 0.9,\n      top_p: opts?.top_p || 1,\n      // frequency_penalty: 0,\n      // presence_penalty: 0,\n      max_tokens: opts?.max_tokens || 1000,\n      n: opts.n || 1,\n      stop: opts?.stop_sequences || undefined,\n      stream: true,\n    };\n    // tools\n    if (opts.tools && opts.tools.length > 0) {\n      Object.assign(params, { tools: opts.tools, stream: false });\n    }\n    return params;\n  }\n\n  private async corvertContents(opts: types.chat.SendOptions): Promise<openai.Message[]> {\n    return Promise.all(\n      opts.messages.map(async (item) => {\n        const parts: openai.Part[] = [];\n        const tool_calls: openai.ToolCallPart[] = [];\n        await Promise.all(\n          item.parts.map(async (part: types.chat.Part) => {\n            if (part.type === 'text') {\n              parts.push({ type: 'text', text: part.text });\n            }\n            if (['image', 'video'].includes(part.type)) {\n              // TODO: fetch 下载图片并转化buffer为base64\n              parts.push({ type: 'image_url', image_url: (part as types.chat.FilePart).url });\n            }\n            if (part.type === 'function_call' && part.id) {\n              const { name, args } = part.function_call;\n              tool_calls.push({ id: part.id, type: 'function', function: { name, arguments: args } });\n            }\n          }),\n        );\n        // if (item.role === 'system') {\n        //   return { role: 'system', content: this.filterTextPartsToString(parts) } as openai.Message;\n        // }\n        if (item.role === 'assistant') {\n          return {\n            role: 'assistant',\n            content: parts,\n            tool_calls: tool_calls.length > 0 ? tool_calls : undefined,\n          } as openai.Message;\n        }\n        return { role: 'user', content: parts } as openai.Message;\n      }),\n    );\n  }\n\n  private filterTextPartsToString(parts: openai.Part[]): string {\n    return parts\n      .filter((p) => p.type === 'text')\n      .map((p) => (p as openai.TextPart).text)\n      .join('');\n  }\n\n  protected convertChoices(candidates: openai.Choice[]): types.chat.Choice[] {\n    const choices: types.chat.Choice[] = [];\n    try {\n      candidates.map(({ index, delta, message, finish_reason }: openai.Choice) => {\n        const parts: types.chat.Part[] = [];\n        let { content, tool_calls } = message || delta;\n        if (delta) {\n          content = delta.content;\n          tool_calls = delta.tool_calls;\n        }\n        if (content) {\n          parts.push({ type: 'text', text: content });\n        }\n        if (tool_calls) {\n          tool_calls.map((call: any) => {\n            const { name, arguments: args } = call.function;\n            parts.push({ type: 'function_call', function_call: { name, args }, id: call.id });\n          });\n        }\n\n        choices.push({ index, role: 'assistant', parts, finish_reason });\n      });\n    } catch (err) {\n      console.warn(err);\n    }\n    return choices;\n  }\n}\n","import { ParseEvent } from 'eventsource-parser';\n\n/**\n * Chat\n */\nexport namespace chat {\n  export class ChatError extends Error {\n    name: 'ChatError';\n    code: number;\n    constructor(message: string, code: number) {\n      super(message);\n      this.code = code;\n    }\n  }\n\n  export type ChatOptions = {\n    agent?: string;\n    baseURL?: string;\n    apiKey: string;\n    apiSecret?: string;\n    timeout?: number;\n  };\n\n  /**\n   * Request\n   */\n  export type SendOptions = {\n    model: string;\n    messages: Message[];\n    tools?: Tools[];\n    temperature?: number;\n    top_p?: number;\n    top_k?: number;\n    n?: number;\n    max_tokens?: number;\n    stop_sequences?: string[];\n    onProgress?: (event: any) => void;\n  };\n\n  /* Message */\n  export type Message = { role: string; parts: Part[] };\n\n  export type Part = TextPart | FilePart | ToolPart;\n  export type TextPart = { type: 'text'; text: string };\n  export type FilePart = { type: 'image' | 'video' | 'file'; url: string };\n  export type ToolPart = FunctionCallTool | FunctionTool;\n\n  /* Tools  */\n  export type Tools = FunctionTool;\n  export type FunctionCallTool = {\n    type: 'function_call';\n    function_call: { name: string; args: any };\n    id?: string | undefined;\n  };\n  export type FunctionTool = { type: 'function'; function: Function };\n\n  export type Function = {\n    name: string;\n    description: string;\n    parameters: { type: string; properties: any; required: string[] };\n  };\n\n  /**\n   * Response\n   */\n  export type ChatResponse = {\n    id: string;\n    model: string;\n    choices: Choice[];\n    usage: Usage;\n  };\n\n  export type Choice = {\n    index: number;\n    role: string;\n    parts: Part[];\n    finish_reason: 'stop' | 'function_call' | string | null;\n  };\n\n  export type Usage = { prompt_tokens: number; completion_tokens: number; total_tokens: number };\n}\n","import { get_encoding } from 'tiktoken';\nimport fetch from 'node-fetch';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport * as types from '@/types';\n\nexport class ChatBaseAPI {\n  protected provider: string = '';\n\n  protected agent?: string = '';\n  protected baseURL: string = '';\n  protected apiKey: string = '';\n  protected apiSecret?: string = '';\n  protected timeout?: number = 10000;\n\n  constructor(opts: types.chat.ChatOptions) {\n    opts.agent && (this.agent = opts.agent);\n    opts.baseURL && (this.baseURL = opts.baseURL);\n    opts.apiKey && (this.apiKey = opts.apiKey);\n    opts.apiSecret && (this.apiSecret = opts.apiSecret);\n    opts.timeout && (this.timeout = opts.timeout);\n  }\n\n  public models(): string[] {\n    throw new Error('Not implemented');\n  }\n\n  public async sendMessage(opts: types.chat.SendOptions | types.image.SendOptions): Promise<any> {\n    throw new Error('Not implemented');\n  }\n\n  public async getTaskResult(task_id: string): Promise<any> {\n    throw new Error('Not implemented');\n  }\n\n  protected async fetchFile(url: string) {\n    const response = await fetch(url, {\n      headers: {\n        'user-agent':\n          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n      },\n      agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n    });\n    const buffer = await response.buffer();\n    const base64 = buffer.toString('base64');\n    const mime_type = response.headers.get('content-type') as string;\n    return { mime_type, data: base64 };\n  }\n\n  protected combineChoices(choices: types.chat.Choice[]): types.chat.Choice[] {\n    return choices.reduce((acc: types.chat.Choice[], item: types.chat.Choice) => {\n      const existingItem = acc.find((i: types.chat.Choice) => i.index === item.index);\n      if (existingItem) {\n        item.parts.forEach((part: types.chat.Part) => {\n          if (part.type === 'text') {\n            const existingPart = existingItem.parts.find((p: types.chat.Part) => p.type === 'text');\n            if (existingPart) {\n              (existingPart as types.chat.TextPart).text += (part as types.chat.TextPart).text;\n            } else {\n              existingItem.parts.push(part);\n            }\n          } else if (part.type === 'function_call') {\n            const existingPart = existingItem.parts.find((p: types.chat.Part) => p.type === 'function_call');\n            if (existingPart) {\n              (existingPart as types.chat.FunctionCallTool).function_call.name +=\n                (part as types.chat.FunctionCallTool).function_call.name || '';\n              (existingPart as types.chat.FunctionCallTool).function_call.args +=\n                (part as types.chat.FunctionCallTool).function_call.args || '';\n            } else {\n              existingItem.parts.push(part);\n            }\n          } else {\n            const existingPart = existingItem.parts.find(\n              (p: types.chat.Part) => JSON.stringify(p) === JSON.stringify(part),\n            );\n            if (!existingPart) {\n              existingItem.parts.push(part);\n            }\n          }\n        });\n\n        // finish_reason\n        existingItem.finish_reason = item.finish_reason;\n      } else {\n        acc.push(item);\n      }\n      return acc;\n    }, []);\n  }\n\n  protected getTokenCount(text: string) {\n    return get_encoding('cl100k_base').encode(text).length;\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { ChatBaseAPI } from '../base';\n\nexport class OpenAIAssistantsAPI extends ChatBaseAPI {\n  protected provider: string = 'openai';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://api.openai.com/v1' }, opts);\n    super(options);\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { v4 as uuidv4 } from 'uuid';\nimport { GoogleAuth } from 'google-auth-library';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { GoogleGeminiAPI } from './gemini';\nimport { gemini } from './types';\n\nexport class GoogleVertexAPI extends GoogleGeminiAPI {\n  protected provider: string = 'google';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://asia-southeast1-aiplatform.googleapis.com/v1' }, opts);\n    super(options);\n  }\n\n  public models(): string[] {\n    return ['gemini-pro', 'gemini-pro-vision'];\n  }\n\n  /**\n   * 根据服务账号获取 access token\n   */\n  private async getToken(): Promise<string> {\n    const auth: GoogleAuth = new GoogleAuth({\n      credentials: { client_email: this.apiKey, private_key: this.apiSecret },\n      scopes: 'https://www.googleapis.com/auth/cloud-platform',\n    });\n    return (await auth.getAccessToken()) as string;\n  }\n\n  /**\n   * 发送消息\n   * @param opts <types.chat.SendOptions>\n   * Reference: https://cloud.google.com/vertex-ai/docs/reference/rest/v1/GenerateContentResponse\n   * Reference: https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/gemini?hl=zh-cn\n   * Multi-modal: https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/send-multimodal-prompts?hl=zh-cn#gemini-send-multimodal-samples-drest\n   * Tools: https://cloud.google.com/vertex-ai/docs/generative-ai/multimodal/function-calling?hl=zh-cn\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n\n    return new Promise(async (resolove, reject) => {\n      const token = await this.getToken();\n      // if have media, use gemini-pro-vision\n      const hasMedia = opts.messages.some((item) =>\n        item.parts.some((part) => part.type === 'image' || part.type === 'video'),\n      );\n      const model = hasMedia ? 'gemini-pro-vision' : opts.model || 'gemini-pro';\n      const url = `${this.baseURL}/publishers/google/models/${model}:streamGenerateContent?alt=sse`;\n      const params: gemini.Request = await this.convertParams(options);\n      // console.log(`[fetch]params`, url, JSON.stringify(params, null, 2));\n\n      const res = await fetchSSE(url, {\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${token}` },\n        body: JSON.stringify(params),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.error?.message || 'request error', res.status));\n      }\n\n      // only get content from node-fetch\n      let response: any;\n      const body: NodeJS.ReadableStream = res.body;\n      body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n      // streaming\n      const choicesList: types.chat.Choice[] = [];\n      const usage: types.chat.Usage = { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 };\n      const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n        // console.log(`->`, event.type, event?.data);\n        if (event.type === 'event') {\n          const res = JSON.parse(event.data);\n          const choices = this.convertChoices(res.candidates);\n          if (res.usageMetadata) {\n            Object.assign(usage, {\n              prompt_tokens: res.usageMetadata.promptTokenCount,\n              completion_tokens: res.usageMetadata.candidatesTokenCount,\n              total_tokens: res.usageMetadata.totalTokenCount,\n            });\n          }\n          onProgress?.(choices);\n          choicesList.push(...choices);\n        }\n      });\n      body.on('readable', async () => {\n        let chunk: string | Buffer;\n        while ((chunk = body.read())) {\n          parser.feed(chunk.toString());\n        }\n      });\n\n      // finished\n      body.on('end', () => {\n        const choices: types.chat.Choice[] = this.combineChoices(choicesList);\n        // TODO: Google AI Gemini not found usageMetadata, but vertex founded.\n        resolove({ id: uuidv4(), model: opts.model, choices, usage });\n      });\n    });\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { v4 as uuidv4 } from 'uuid';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { gemini } from './types';\nimport { ChatBaseAPI } from '../base';\n\nexport class GoogleGeminiAPI extends ChatBaseAPI {\n  protected provider: string = 'google';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://generativelanguage.googleapis.com/v1beta' }, opts);\n    super(options);\n  }\n\n  public models(): string[] {\n    return ['gemini-pro', 'gemini-pro-vision'];\n  }\n\n  /**\n   *\n   * https://ai.google.dev/docs/gemini_api_overview?hl=zh-cn#curl_3\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n    return new Promise(async (resolove, reject) => {\n      const params: gemini.Request = await this.convertParams(options);\n      // if have media, use gemini-pro-vision\n      const hasMedia = params.contents.some((item) => item.parts.some((part) => 'inline_data' in part));\n      const model = hasMedia ? 'gemini-pro-vision' : opts.model || 'gemini-pro';\n      const url = `${this.baseURL}/models/${model}:streamGenerateContent?alt=sse`;\n      // console.log(`[fetch]params`, JSON.stringify(params, null, 2));\n\n      const res = await fetchSSE(url, {\n        headers: { 'Content-Type': 'application/json', 'x-goog-api-key': this.apiKey },\n        body: JSON.stringify(params),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n      // console.log(`[fetch]result`, res);\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.error?.message || 'request error', res.status));\n      }\n\n      // only get content from node-fetch\n      const body: NodeJS.ReadableStream = res.body;\n      body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n      // streaming\n      const choicesList: types.chat.Choice[] = [];\n      const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const res = JSON.parse(event.data);\n          // console.log(`->`, JSON.stringify(res));\n          const choices = this.convertChoices(res.candidates);\n          onProgress?.(choices);\n\n          choicesList.push(...choices);\n        }\n      });\n      body.on('readable', async () => {\n        let chunk: string | Buffer;\n        while ((chunk = body.read())) {\n          parser.feed(chunk.toString());\n        }\n      });\n\n      body.on('end', () => {\n        const choices: types.chat.Choice[] = this.combineChoices(choicesList);\n        // TODO: Google AI Gemini not found usageMetadata, but vertex founded.\n        const usage = { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 };\n        resolove({ id: uuidv4(), model: opts.model, choices, usage });\n      });\n    });\n  }\n\n  /**\n   * 转换为 Gemini 要求的请求参数\n   * https://cloud.google.com/vertex-ai/docs/reference/rest/v1/GenerateContentResponse\n   * @returns\n   */\n  protected async convertParams(opts: types.chat.SendOptions): Promise<gemini.Request> {\n    return {\n      contents: await this.corvertContents(opts),\n      tools: this.corvertTools(opts),\n      safety_settings: [\n        // { category: 'BLOCK_NONE', threshold: 'HARM_CATEGORY_UNSPECIFIED' },\n      ],\n      generationConfig: {\n        temperature: opts.temperature || 0.9, // gemini-pro:0.9, gemini-pro-vision:0.4\n        topP: opts.top_p || 1, // gemini-pro:none, gemini-pro-vision:32\n        topK: opts.top_k || 1,\n        candidateCount: opts.n || 1,\n        maxOutputTokens: opts.max_tokens || 2048, // gemini-pro:2048, gemini-pro-vision:8192\n        stopSequences: opts.stop_sequences || undefined,\n      },\n    };\n  }\n\n  protected async corvertContents(opts: types.chat.SendOptions): Promise<gemini.Content[]> {\n    return Promise.all(\n      opts.messages.map(async (item) => {\n        const parts: gemini.Part[] = [];\n        await Promise.all(\n          item.parts.map(async (part: types.chat.Part) => {\n            if (part.type === 'text') {\n              parts.push({ text: part.text });\n            }\n            if (['image', 'video'].includes(part.type)) {\n              // TODO: fetch 下载图片并转化buffer为base64\n              try {\n                const inline_data = await this.fetchFile((part as types.chat.FilePart).url);\n                parts.push({ inline_data });\n              } catch (err) {\n                // console.warn(``);\n              }\n            }\n            if (part.type === 'function_call') {\n              const { name, args } = part.function_call;\n              parts.push({ functionCall: { name, args } });\n            }\n          }),\n        );\n        item.role = item.role === 'assistant' ? 'model' : item.role;\n\n        return { role: item.role, parts } as gemini.Content;\n      }),\n    );\n  }\n\n  protected corvertTools(opts: types.chat.SendOptions): gemini.Tools[] {\n    const tools: gemini.Tools[] = [];\n    if (opts.tools) {\n      opts.tools.map((item) => {\n        if (item.type === 'function') {\n          tools.push({ functionDeclarations: [item.function] });\n        }\n      });\n    }\n    return tools;\n  }\n\n  protected convertChoices(candidates: gemini.Candidate[]): types.chat.Choice[] {\n    const choices: types.chat.Choice[] = [];\n    try {\n      candidates.map(({ index, content, finishReason }: gemini.Candidate) => {\n        const parts: types.chat.Part[] = [];\n        content.parts.map((part: any) => {\n          if ('text' in part) {\n            parts.push({ type: 'text', text: part.text });\n          }\n          if ('functionCall' in part) {\n            parts.push({ type: 'function_call', function_call: part.functionCall });\n          }\n        });\n        choices.push({ index, role: 'assistant', parts, finish_reason: 'stop' });\n      });\n    } catch (err) {\n      console.warn(err);\n    }\n    return choices;\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { GoogleAuth } from 'google-auth-library';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { claude } from '../anthropic/types';\nimport { ChatBaseAPI } from '../base';\n\nexport class GoogleClaudeAPI extends ChatBaseAPI {\n  protected provider: string = 'google';\n\n  constructor(opts: types.chat.ChatOptions) {\n    // available models: claude-instant-1p2(100K tokens), claude-2p0(200K tokens)\n    // available regions: us-central1(60QPM), asia-southeast1(60QPM)\n    const options = Object.assign({ baseURL: '' }, opts);\n    super(options);\n  }\n\n  /**\n   * 根据服务账号获取 access token\n   */\n  private async getToken(): Promise<string> {\n    const auth: GoogleAuth = new GoogleAuth({\n      credentials: { client_email: this.apiKey, private_key: this.apiSecret },\n      scopes: 'https://www.googleapis.com/auth/cloud-platform',\n    });\n    return (await auth.getAccessToken()) as string;\n  }\n\n  public models(): string[] {\n    return ['claude-3-sonnet@20240229', 'claude-3-haiku@20240307'];\n  }\n\n  /**\n   * Send message\n   * https://docs.anthropic.com/claude/reference/messages_post\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n    return new Promise(async (resolove, reject) => {\n      const token = await this.getToken();\n      const url = `${this.baseURL}/publishers/anthropic/models/${opts.model}:streamRawPredict?alt=sse`;\n      const params: claude.Request = await this.convertParams(options);\n      console.log(`->url`, url, params);\n      const res = await fetchSSE(url, {\n        headers: { 'content-type': 'application/json', Authorization: `Bearer ${token}` },\n        body: JSON.stringify(params),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.error?.message || 'request error', res.status));\n      }\n\n      // only get content from node-fetch\n      const body: NodeJS.ReadableStream = res.body;\n      body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n      let response: types.chat.ChatResponse;\n      const choicesList: types.chat.Choice[] = [];\n      const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const res: claude.Response = JSON.parse(event.data);\n          response = this.convertResult(response, res);\n          const choices = this.convertChoices(res);\n          if (choices.length > 0) {\n            onProgress?.(choices);\n            choicesList.push(...choices);\n          }\n        }\n      });\n      body.on('readable', async () => {\n        let chunk: string | Buffer;\n        while ((chunk = body.read())) {\n          parser.feed(chunk.toString());\n        }\n      });\n\n      body.on('end', () => {\n        response.choices = this.combineChoices(choicesList);\n        resolove(response);\n      });\n    });\n  }\n\n  /**\n   * https://docs.anthropic.com/claude/reference/messages-streaming\n   * @returns\n   */\n  private async convertParams(opts: types.chat.SendOptions): Promise<claude.Request> {\n    return {\n      model: opts.model || 'claude-instant-1.2',\n      messages: await this.corvertContents(opts),\n      system: '',\n      temperature: opts.temperature || 0.8,\n      top_k: opts.top_k || 1,\n      top_p: opts.top_p || 1,\n      max_tokens: opts.max_tokens || 1024,\n      // metadata:\n      stop_sequences: opts.stop_sequences || [],\n      stream: true,\n      anthropic_version: 'vertex-2023-10-16',\n    };\n  }\n\n  protected async corvertContents(opts: types.chat.SendOptions): Promise<claude.Content[]> {\n    return Promise.all(\n      opts.messages.map(async (item) => {\n        const parts: claude.Part[] = [];\n        await Promise.all(\n          item.parts.map(async (part: types.chat.Part) => {\n            if (part.type === 'text') {\n              parts.push({ type: 'text', text: part.text });\n            }\n            if (['image', 'video'].includes(part.type)) {\n              try {\n                const { mime_type: media_type, data } = await this.fetchFile((part as types.chat.FilePart).url);\n                parts.push({ type: 'image', source: { type: 'base64', media_type, data } });\n              } catch (err) {\n                // console.warn(``);\n              }\n            }\n          }),\n        );\n        return { role: item.role, content: parts } as claude.Content;\n      }),\n    );\n  }\n\n  private convertResult(response, res: claude.Response): types.chat.ChatResponse {\n    try {\n      if (res.type === 'message_start') {\n        const { message: m } = res;\n        const { input_tokens: prompt_tokens, output_tokens: completion_tokens } = m.usage;\n        response = {\n          id: m.id,\n          model: m.model,\n          choices: [],\n          usage: { prompt_tokens, completion_tokens, total_tokens: prompt_tokens + completion_tokens },\n        };\n      }\n\n      if (res.type === 'message_delta') {\n        const { output_tokens } = res.usage;\n        response.usage.completion_tokens = output_tokens;\n        response.usage.total_tokens = response.usage.prompt_tokens + output_tokens;\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return response;\n  }\n\n  private convertChoices(res: claude.Response): types.chat.Choice[] {\n    const choices: types.chat.Choice[] = [];\n    try {\n      if (res.type === 'content_block_start') {\n        const { index, content_block: c } = res;\n        choices.push({ index, role: 'assistant', parts: [{ type: 'text', text: c.text }], finish_reason: null });\n      }\n\n      if (res.type === 'content_block_delta') {\n        const { index, delta: d } = res;\n        choices.push({ index, role: 'assistant', parts: [{ type: 'text', text: d.text }], finish_reason: null });\n      }\n\n      if (res.type === 'content_block_stop') {\n        const { index } = res;\n        choices.push({ index, role: 'assistant', parts: [], finish_reason: 'stop' });\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return choices;\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { claude } from './types';\nimport { ChatBaseAPI } from '../base';\n\nexport class AnthropicClaudeAPI extends ChatBaseAPI {\n  protected provider: string = 'anthropic';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://api.anthropic.com' }, opts);\n    super(options);\n  }\n\n  public models(): string[] {\n    return ['claude-3-opus-20240229', 'claude-3-sonnet-20240229', 'claude-2.1', 'claude-2.0', 'claude-instant-1.2'];\n  }\n\n  /**\n   * Send message\n   * https://docs.anthropic.com/claude/reference/messages_post\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n    return new Promise(async (resolove, reject) => {\n      const url = `${this.baseURL}/v1/messages`;\n      const params: claude.Request = await this.convertParams(options);\n      const res = await fetchSSE(url, {\n        headers: {\n          'content-type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': this.apiKey,\n        },\n        body: JSON.stringify(params),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.error?.message || 'request error', res.status));\n      }\n\n      // only get content from node-fetch\n      const body: NodeJS.ReadableStream = res.body;\n      body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n      let response: types.chat.ChatResponse;\n      const choicesList: types.chat.Choice[] = [];\n      const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const res: claude.Response = JSON.parse(event.data);\n          response = this.convertResult(response, res);\n          const choices = this.convertChoices(res);\n          if (choices.length > 0) {\n            onProgress?.(choices);\n            choicesList.push(...choices);\n          }\n        }\n      });\n      body.on('readable', async () => {\n        let chunk: string | Buffer;\n        while ((chunk = body.read())) {\n          parser.feed(chunk.toString());\n        }\n      });\n\n      body.on('end', () => {\n        response.choices = this.combineChoices(choicesList);\n        resolove(response);\n      });\n    });\n  }\n\n  /**\n   * https://docs.anthropic.com/claude/reference/messages-streaming\n   * @returns\n   */\n  private async convertParams(opts: types.chat.SendOptions): Promise<claude.Request> {\n    return {\n      model: opts.model || 'claude-instant-1.2',\n      messages: await this.corvertContents(opts),\n      system: '',\n      temperature: opts.temperature || 0.8,\n      top_k: opts.top_k || 1,\n      top_p: opts.top_p || 1,\n      max_tokens: opts.max_tokens || 1024,\n      // metadata:\n      stop_sequences: opts.stop_sequences || [],\n      stream: true,\n    };\n  }\n\n  protected async corvertContents(opts: types.chat.SendOptions): Promise<claude.Content[]> {\n    return Promise.all(\n      opts.messages.map(async (item) => {\n        const parts: claude.Part[] = [];\n        await Promise.all(\n          item.parts.map(async (part: types.chat.Part) => {\n            if (part.type === 'text') {\n              parts.push({ type: 'text', text: part.text });\n            }\n            if (['image', 'video'].includes(part.type)) {\n              try {\n                const { mime_type: media_type, data } = await this.fetchFile((part as types.chat.FilePart).url);\n                parts.push({ type: 'image', source: { type: 'base64', media_type, data } });\n              } catch (err) {\n                // console.warn(``);\n              }\n            }\n          }),\n        );\n        return { role: item.role, content: parts } as claude.Content;\n      }),\n    );\n  }\n\n  private convertResult(response, res: claude.Response): types.chat.ChatResponse {\n    try {\n      if (res.type === 'message_start') {\n        const { message: m } = res;\n        const { input_tokens: prompt_tokens, output_tokens: completion_tokens } = m.usage;\n        response = {\n          id: m.id,\n          model: m.model,\n          choices: [],\n          usage: { prompt_tokens, completion_tokens, total_tokens: prompt_tokens + completion_tokens },\n        };\n      }\n\n      if (res.type === 'message_delta') {\n        const { output_tokens } = res.usage;\n        response.usage.completion_tokens = output_tokens;\n        response.usage.total_tokens = response.usage.prompt_tokens + output_tokens;\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return response;\n  }\n\n  private convertChoices(res: claude.Response): types.chat.Choice[] {\n    const choices: types.chat.Choice[] = [];\n    try {\n      if (res.type === 'content_block_start') {\n        const { index, content_block: c } = res;\n        choices.push({ index, role: 'assistant', parts: [{ type: 'text', text: c.text }], finish_reason: null });\n      }\n\n      if (res.type === 'content_block_delta') {\n        const { index, delta: d } = res;\n        choices.push({ index, role: 'assistant', parts: [{ type: 'text', text: d.text }], finish_reason: null });\n      }\n\n      if (res.type === 'content_block_stop') {\n        const { index } = res;\n        choices.push({ index, role: 'assistant', parts: [], finish_reason: 'stop' });\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return choices;\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { ChatBaseAPI } from '../base';\nimport { requestWithAuth, toUtf8 } from './auth';\n\nexport class AnthropicBedrockAPI extends ChatBaseAPI {\n  protected provider: string = 'anthropic';\n\n  constructor(opts: types.chat.ChatOptions) {\n    super(Object.assign({ baseURL: `https://bedrock-runtime.ap-northeast-1.amazonaws.com` }, opts));\n  }\n\n  public models(): string[] {\n    return ['anthropic.claude-v2:1', 'anthropic.claude-v2', 'anthropic.claude-v1', 'anthropic.claude-instant-v1'];\n  }\n\n  /**\n   * Send message\n   * https://docs.anthropic.com/claude/reference/messages_post\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n\n    return new Promise(async (resolove, reject) => {\n      const url = new URL(`${this.baseURL}/model/${opts.model}/invoke-with-response-stream`);\n      // 预请求并签名\n      const req = await requestWithAuth(\n        { region: 'ap-northeast-1', service: 'bedrock', accessKeyId: this.apiKey, secretAccessKey: this.apiSecret },\n        {\n          method: 'POST',\n          protocol: url.protocol,\n          path: url.pathname,\n          headers: {\n            host: url.hostname,\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent': 'AnthropicBedrock/JS 0.6.1',\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': '0.6.1',\n            'X-Stainless-OS': 'MacOS',\n            'X-Stainless-Arch': 'arm64',\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': 'v19.4.0',\n          },\n          body: JSON.stringify(this.convertParams(options), null, 2),\n        },\n      );\n      // 请求\n      const res = await fetchSSE(url, {\n        headers: req.headers,\n        body: req.body,\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: req.method,\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.message || 'request error', res.status));\n      }\n\n      // only get content from node-fetch\n      let response: any;\n      const body: NodeJS.ReadableStream = res.body;\n      body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n      const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n        // if (event.type === 'event') {\n        // response = JSON.parse(event.data);\n        // onProgress?.(response);\n        // }\n        console.log(`[bedrock]`, event);\n      });\n\n      body.on('readable', async () => {\n        // 解析SSE 并进行utf8解码\n        // let chunk: string | Buffer;\n        // while ((chunk = body.read())) {\n        //   console.log(`[bedrock]`, chunk.toString());\n        //   // parser.feed(chunk.toString());\n        // }\n\n        let event;\n        while (null !== (event = body.read())) {\n          if (Buffer.isBuffer(event)) {\n            console.log(`[bedrock]`, event.toString('utf8'));\n          }\n        }\n      });\n\n      body.on('end', () => {\n        resolove(response);\n      });\n    });\n  }\n\n  /**\n   * https://docs.anthropic.com/claude/reference/messages-streaming\n   * @returns\n   */\n  private convertParams(opts: types.chat.SendOptions) {\n    return {\n      prompt: '\\n\\nHuman: Hey Claude! How can I recursively list all files in a directory in Rust?\\n\\nAssistant:',\n      temperature: 1,\n      // top_k: 250,\n      // top_p: 0.999,\n      max_tokens_to_sample: 500,\n      anthropic_version: 'bedrock-2023-05-31',\n    };\n  }\n\n  // 将 Gemini 的结果转换为你的数据格式\n  private convertResult(result: any) {\n    return {\n      // 根据你的数据格式，从 Gemini 的结果中提取数据\n      history: result.contents,\n      // 其他数据...\n    };\n  }\n}\n","import { SignatureV4 } from '@smithy/signature-v4';\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { Sha256 } from '@aws-crypto/sha256-js';\n\nexport const toUtf8 = (input: Uint8Array): string => new TextDecoder('utf-8').decode(input);\n\nexport async function requestWithAuth(options: any, request: any): Promise<HttpRequest> {\n  const { accessKeyId, secretAccessKey, region, service } = options;\n  const credentials = { accessKeyId, secretAccessKey };\n  // sign request\n  const signed = await new SignatureV4({ region, service, sha256: Sha256, credentials }).sign(new HttpRequest(request));\n  return signed as HttpRequest;\n}\n","import fetchSSE from 'node-fetch';\nimport { v4 as uuidv4 } from 'uuid';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { ChatBaseAPI } from '../base';\n\nexport class AliyunQwenAPI extends ChatBaseAPI {\n  protected provider: string = 'google';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://dashscope.aliyuncs.com/api/v1' }, opts);\n    super(options);\n  }\n\n  public models(): string[] {\n    return [\n      // free\n      'qwen-vl-chat-v1',\n\n      // cheap\n      'qwen-turbo',\n      'qwen-max',\n      'qwen-max-1201',\n      'qwen-max-longcontext',\n\n      // paid\n      'qwen-plus',\n      'qwen-vl-plus',\n    ];\n  }\n\n  /**\n   *\n   * https://ai.google.dev/docs/gemini_api_overview?hl=zh-cn#curl_3\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n    return new Promise(async (resolove, reject) => {\n      const isMultimodal = opts.model === 'qwen-vl-plus';\n      const url = `${this.baseURL}/services/aigc/${isMultimodal ? 'multimodal' : 'text'}-generation/generation`;\n      const params: types.aliyun.Request = await this.convertParams(options);\n      // console.log(`[fetch]params`, JSON.stringify(params, null, 2));\n\n      const res = await fetchSSE(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n          'X-DashScope-SSE': 'enable',\n        },\n        body: JSON.stringify(params),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.message || 'request error', res.status));\n      }\n\n      // only get content from node-fetch\n      const body: NodeJS.ReadableStream = res.body;\n      body.on('error', (err) => reject(new types.chat.ChatError(err.message, 500)));\n\n      // streaming\n      const choicesList: types.chat.Choice[] = [];\n      const usage: types.chat.Usage = { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 };\n      const parser = createParser((event: ParseEvent | ReconnectInterval) => {\n        if (event.type === 'event') {\n          const res = JSON.parse(event.data);\n          // console.log(`->`, JSON.stringify(res));\n          // success\n          if (res?.output) {\n            const choices = this.convertChoices(res.output.choices);\n            onProgress?.(choices);\n\n            if (res.usage) {\n              const u = res.usage;\n              Object.assign(usage, {\n                prompt_tokens: u.input_tokens,\n                completion_tokens: u.output_tokens,\n                total_tokens: u.total_tokens ? u.total_tokens : u.input_tokens + u.output_tokens,\n              });\n            }\n            choicesList.push(...choices);\n          }\n\n          // error\n          if (res?.code) {\n            reject(new types.chat.ChatError(res?.message, 500));\n          }\n        }\n      });\n      body.on('readable', async () => {\n        let chunk: string | Buffer;\n        while ((chunk = body.read())) {\n          parser.feed(chunk.toString());\n        }\n      });\n\n      body.on('end', () => {\n        const choices: types.chat.Choice[] = this.combineChoices(choicesList);\n        resolove({ id: uuidv4(), model: opts.model, choices, usage });\n      });\n    });\n  }\n\n  /**\n   * Aliyun Qwen API\n   * https://help.aliyun.com/zh/dashscope/developer-reference/api-details\n   * @returns\n   */\n  private async convertParams(opts: types.chat.SendOptions): Promise<types.aliyun.Request> {\n    const params = {\n      model: opts.model || 'qwen-turbo',\n      input: {\n        messages: await this.corvertContents(opts),\n      },\n      parameters: {\n        top_p: opts.top_p || undefined,\n        top_k: opts.top_k || undefined,\n        incremental_output: true,\n      },\n    };\n    // fix different model\n    if (opts.model !== 'qwen-vl-plus') {\n      Object.assign(params.parameters, {\n        temperature: opts.temperature || 1,\n        max_tokens: opts.max_tokens || 1500,\n        enable_search: true,\n        stop: opts.stop_sequences || undefined,\n        result_format: 'message',\n      });\n    }\n    return params;\n  }\n\n  private async corvertContents(opts: types.chat.SendOptions): Promise<types.aliyun.Content[]> {\n    return Promise.all(\n      opts.messages.map(async (item) => {\n        const parts: types.aliyun.Part[] = [];\n        await Promise.all(\n          item.parts.map(async (part: types.chat.Part) => {\n            if (part.type === 'text') {\n              parts.push({ text: part.text });\n            }\n            if (['image'].includes(part.type)) {\n              parts.push({ image: (part as types.chat.FilePart).url });\n            }\n          }),\n        );\n        // fix different model\n        let content: string | types.aliyun.Part[] = parts;\n        if (!['qwen-vl-plus'].includes(opts.model)) {\n          content = parts\n            .map((item: any) => {\n              return 'text' in item ? item.text : '';\n            })\n            .join('\\n');\n        }\n        return { role: item.role, content: parts } as types.aliyun.Content;\n      }),\n    );\n  }\n\n  protected convertChoices(candidates: types.aliyun.Choice[]): types.chat.Choice[] {\n    const choices: types.chat.Choice[] = [];\n    try {\n      candidates.map(({ message, finish_reason }: types.aliyun.Choice) => {\n        const parts: types.chat.Part[] = [];\n        // for text\n        if (typeof message.content === 'string') {\n          parts.push({ type: 'text', text: message.content });\n        }\n        // for multimodal\n        if (typeof message.content === 'object' && message.content instanceof Array) {\n          message.content.map((part: any) => {\n            if ('text' in part) {\n              parts.push({ type: 'text', text: part.text });\n            }\n          });\n        }\n        choices.push({ index: 0, role: 'assistant', parts, finish_reason: 'stop' });\n      });\n    } catch (err) {\n      console.warn(err);\n    }\n    return choices;\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { ChatBaseAPI } from '../base';\n\nexport class AliyunWanxAPI extends ChatBaseAPI {\n  protected provider: string = 'google';\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://dashscope.aliyuncs.com/api/v1' }, opts);\n    super(options);\n  }\n\n  public models(): string[] {\n    return ['wanx-v1'];\n  }\n\n  /**\n   * https://help.aliyun.com/zh/dashscope/developer-reference/api-details-9\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.image.SendOptions) {\n    return new Promise(async (resolove, reject) => {\n      const url = `${this.baseURL}/services/aigc/text2image/image-synthesis`;\n      const res = await fetchSSE(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.apiKey}`,\n          'X-DashScope-Async': 'enable',\n        },\n        body: JSON.stringify(this.convertParams(opts)),\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n        method: 'POST',\n      });\n\n      if (!res.ok) {\n        const reason = await res.json();\n        reject(new types.chat.ChatError(reason.message || 'request error', res.status));\n      }\n\n      try {\n        const { output } = await res.json();\n        if (output.task_status === 'FAILED') {\n          reject(new types.chat.ChatError(output.message, res.status));\n        }\n        resolove(output);\n      } catch (err) {\n        reject(new types.chat.ChatError('request error', res.status));\n      }\n    });\n  }\n\n  public async getTaskResult(task_id: string) {\n    const url = `${this.baseURL}/tasks/${task_id}`;\n    return new Promise(async (resolove, reject) => {\n      const res = await fetchSSE(url, {\n        headers: { Authorization: `Bearer ${this.apiKey}` },\n        agent: this.agent ? new HttpsProxyAgent(this.agent) : undefined,\n      });\n\n      try {\n        const { output } = await res.json();\n        if (output.task_status === 'FAILED') {\n          reject(new types.chat.ChatError(output.message, res.status));\n        }\n\n        resolove(output);\n      } catch (err) {\n        reject(new types.chat.ChatError('request error', res.status));\n      }\n    });\n  }\n\n  /**\n   * https://help.aliyun.com/zh/dashscope/developer-reference/api-details-9\n   * @returns\n   */\n  private convertParams(opts: types.image.SendOptions) {\n    return {\n      model: opts.model || 'wanx-v1',\n      input: {\n        prompt: opts.prompt,\n      },\n      parameters: {\n        style: '<sketch>',\n        size: '1024*1024',\n        n: 4,\n        seed: 42,\n      },\n    };\n  }\n\n  // 将 Gemini 的结果转换为你的数据格式\n  private convertResult(result: any) {\n    return {\n      // 根据你的数据格式，从 Gemini 的结果中提取数据\n      history: result.contents,\n      // 其他数据...\n    };\n  }\n}\n","import fetchSSE from 'node-fetch';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as tencentcloud from 'tencentcloud-sdk-nodejs';\nimport { createParser, type ParseEvent, type ReconnectInterval } from 'eventsource-parser';\n\nimport * as types from '@/types';\nimport { ChatBaseAPI } from '../base';\nimport { hunyuan } from './types';\n\nexport class TencentHunyuanAPI extends ChatBaseAPI {\n  protected provider: string = 'tencent';\n  private client: any;\n\n  constructor(opts: types.chat.ChatOptions) {\n    const options = Object.assign({ baseURL: 'https://hunyuan.tencentcloudapi.com' }, opts);\n    super(options);\n\n    // init tencentcloud client\n    this.client = new tencentcloud.hunyuan.v20230901.Client({\n      credential: { secretId: this.apiKey, secretKey: this.apiSecret },\n      profile: {\n        signMethod: 'TC3-HMAC-SHA256',\n        httpProfile: { reqMethod: 'POST', reqTimeout: 30, endpoint: 'hunyuan.tencentcloudapi.com' },\n      },\n    });\n  }\n\n  public models(): string[] {\n    return ['ChatStd', 'ChatPro'];\n  }\n\n  /**\n   * tencent hunyuan\n   * https://cloud.tencent.com/document/api/1729/101836\n   * @param opts\n   * @returns\n   */\n  public async sendMessage(opts: types.chat.SendOptions) {\n    const { onProgress = () => {}, ...options } = opts;\n    return new Promise(async (resolove, reject) => {\n      if (!this.models().includes(opts.model)) {\n        reject(new Error(`model ${opts.model} is not supported`));\n      }\n\n      const params = await this.convertParams(options);\n      const response = await this.client[opts.model](params);\n\n      // streaming\n      let id = uuidv4();\n      const choicesList: types.chat.Choice[] = [];\n      const usage: types.chat.Usage = { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 };\n      for await (let message of response) {\n        const res = JSON.parse(message.data);\n        id = res.Id;\n        const choices = this.convertChoices(res.Choices);\n        if (res.Usage) {\n          Object.assign(usage, {\n            prompt_tokens: res.Usage.PromptTokens,\n            completion_tokens: res.Usage.CompletionTokens,\n            total_tokens: res.Usage.TotalTokens,\n          });\n        }\n        onProgress?.(choices);\n        choicesList.push(...choices);\n      }\n\n      // finished\n      const choices: types.chat.Choice[] = this.combineChoices(choicesList);\n      resolove({ id, model: opts.model, choices, usage });\n    });\n  }\n\n  /**\n   * 转换请求参数\n   * @returns\n   */\n  private async convertParams(opts: types.chat.SendOptions) {\n    return {\n      TopP: opts.top_p || 0,\n      Temperature: opts.temperature || 0,\n      Messages: await this.corvertContents(opts),\n    };\n  }\n\n  private async corvertContents(opts: types.chat.SendOptions): Promise<hunyuan.Content[]> {\n    return Promise.all(\n      opts.messages.map(async (item) => {\n        const contents: string[] = [];\n        await Promise.all(\n          item.parts.map(async (part: types.chat.Part) => {\n            if (part.type === 'text') {\n              contents.push(part.text);\n            }\n          }),\n        );\n        return { Role: item.role, Content: contents.join('/n') } as hunyuan.Content;\n      }),\n    );\n  }\n\n  protected convertChoices(candidates: hunyuan.Choice[]): types.chat.Choice[] {\n    const choices: types.chat.Choice[] = [];\n    try {\n      candidates.map(({ Delta, FinishReason }: hunyuan.Choice, index) => {\n        const parts: types.chat.Part[] = [];\n        parts.push({ type: 'text', text: Delta.Content });\n        choices.push({ index, role: 'assistant', parts, finish_reason: 'stop' });\n      });\n    } catch (err) {\n      console.warn(err);\n    }\n    return choices;\n  }\n}\n","import { OpenAICompletionsAPI, OpenAIAssistantsAPI, GoogleClaudeAPI } from '@/provider';\nimport { GoogleVertexAPI, GoogleGeminiAPI } from '@/provider';\nimport { AnthropicClaudeAPI, AnthropicBedrockAPI } from '@/provider';\nimport { AliyunQwenAPI, AliyunWanxAPI } from '@/provider';\nimport { ChatBaseAPI } from '@/provider/base';\nimport { TencentHunyuanAPI } from '@/provider/tencent';\n\nimport * as types from '@/types';\n\nexport class ChatAPI {\n  private provider: ChatBaseAPI | null = null;\n\n  constructor(provider: string, opts: types.chat.ChatOptions) {\n    switch (provider) {\n      case types.Provider.GOOGLE_VERTEX:\n        this.provider = new GoogleVertexAPI(opts);\n        break;\n      case types.Provider.GOOGLE_GEMINI:\n        this.provider = new GoogleGeminiAPI(opts);\n        break;\n      case types.Provider.GOOGLE_CLAUDE:\n        this.provider = new GoogleClaudeAPI(opts);\n        break;\n      case types.Provider.OPENAI_COMPLETIONS:\n        this.provider = new OpenAICompletionsAPI(opts);\n        break;\n      case types.Provider.OPENAI_ASSISTANTS:\n        this.provider = new OpenAIAssistantsAPI(opts);\n        break;\n      case types.Provider.ALIYUN_QWEN:\n        this.provider = new AliyunQwenAPI(opts);\n        break;\n      case types.Provider.ALIYUN_WANX:\n        this.provider = new AliyunWanxAPI(opts);\n        break;\n      case types.Provider.ANTHROPIC_CLAUDE:\n        this.provider = new AnthropicClaudeAPI(opts);\n        break;\n      case types.Provider.ANTHROPIC_BEDROCK:\n        this.provider = new AnthropicBedrockAPI(opts);\n        break;\n      case types.Provider.TENCENT_HUNYUAN:\n        this.provider = new TencentHunyuanAPI(opts);\n        break;\n      default:\n        throw new Error(`Unsupported supplier: ${provider}`);\n    }\n  }\n\n  public async sendMessage(opts: types.chat.SendOptions | types.image.SendOptions) {\n    if (!this.provider) {\n      throw new Error('Provider is not initialized');\n    }\n    return await this.provider.sendMessage(opts);\n  }\n}\n","import { AliyunWanxAPI } from '@/provider';\nimport { ChatBaseAPI } from '@/provider/base';\n\nimport * as types from '@/types';\n\nexport class ImageAPI {\n  private provider: ChatBaseAPI | null = null;\n\n  constructor(provider: string, opts: types.chat.ChatOptions) {\n    switch (provider) {\n      case types.Provider.ALIYUN_WANX:\n        this.provider = new AliyunWanxAPI(opts);\n        break;\n      default:\n        throw new Error(`Unsupported supplier: ${provider}`);\n    }\n  }\n\n  public async sendMessage(opts: types.image.SendOptions) {\n    if (!this.provider) {\n      throw new Error('Provider is not initialized');\n    }\n    return await this.provider.sendMessage(opts);\n  }\n\n  public async getTaskResult(task_id: string) {\n    if (!this.provider) {\n      throw new Error('Provider is not initialized');\n    }\n    return await this.provider.getTaskResult(task_id);\n  }\n}\n"],"mappings":"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","names":["Provider","import_node_fetch","import_https_proxy_agent","chat","fetch","fetchSSE","uuidv4","res","import_node_fetch","import_uuid","import_https_proxy_agent","import_eventsource_parser","import_node_fetch","import_uuid","import_https_proxy_agent","import_eventsource_parser","fetchSSE","res","uuidv4","fetchSSE","res","uuidv4","import_node_fetch","import_google_auth_library","import_https_proxy_agent","import_eventsource_parser","fetchSSE","res","import_node_fetch","import_https_proxy_agent","import_eventsource_parser","fetchSSE","res","import_node_fetch","import_https_proxy_agent","import_eventsource_parser","fetchSSE","import_node_fetch","import_uuid","import_https_proxy_agent","import_eventsource_parser","fetchSSE","res","uuidv4","item","import_node_fetch","import_https_proxy_agent","fetchSSE","import_uuid","uuidv4","choices"]}